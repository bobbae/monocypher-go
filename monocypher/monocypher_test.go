package monocypher

import "fmt"

func ExampleLock() {
	key := []byte("Gophers are such a fun thing. Hehehehehe")
	// Record of nonce generated by crypto/rand.Read()
	nonce := []byte{107, 131, 11, 111, 188, 30, 66, 190, 31, 157, 156, 136, 226, 107, 32, 114, 231, 159, 140, 245, 164, 170, 242, 191}
	plain := []byte("Hello this is Gopher army, we are gonna rule this world ")
	mac, cipher := Lock(plain, nonce, key)
	fmt.Println("MAC", mac, "Cipher", cipher)
	// Output: MAC [209 44 35 111 91 58 6 70 116 153 198 210 165 125 248 87] Cipher [62 210 135 119 146 59 215 233 197 251 31 141 50 104 181 169 2 21 19 227 29 85 158 85 244 21 46 124 232 46 171 148 127 92 227 129 227 68 181 49 125 91 206 210 81 115 140 66 154 186 195 181 254 142 202 145]

}
func ExampleUnlock() {
	key := []byte("Gophers are such a fun thing. Hehehehehe")
	nonce := []byte{107, 131, 11, 111, 188, 30, 66, 190, 31, 157, 156, 136, 226, 107, 32, 114, 231, 159, 140, 245, 164, 170, 242, 191}
	mac := []byte{209, 44, 35, 111, 91, 58, 6, 70, 116, 153, 198, 210, 165, 125, 248, 87}
	cipher := []byte{62, 210, 135, 119, 146, 59, 215, 233, 197, 251, 31, 141, 50, 104, 181, 169, 2, 21, 19, 227, 29, 85, 158, 85, 244, 21, 46, 124, 232, 46, 171, 148, 127, 92, 227, 129, 227, 68, 181, 49, 125, 91, 206, 210, 81, 115, 140, 66, 154, 186, 195, 181, 254, 142, 202, 145}
	plain := Unlock(cipher, nonce, key, mac)
	fmt.Println(string(plain))
	// Output: Hello this is Gopher army, we are gonna rule this world
}
func ExampleAeadLock() {
	key := []byte("Gophers are such a fun thing. Hehehehehe")
	// Record of nonce generated by crypto/rand.Read()
	nonce := []byte{107, 131, 11, 111, 188, 30, 66, 190, 31, 157, 156, 136, 226, 107, 32, 114, 231, 159, 140, 245, 164, 170, 242, 191}
	plain := []byte("Hello this is Gopher army, we are gonna rule this world ")
	ad := []byte("hi there")
	mac, cipher, add := AeadLock(plain, nonce, key, ad)
	fmt.Println("MAC", mac, "Cipher", cipher, "ADD", add)
	// Output: MAC [101 221 188 62 235 121 90 252 179 62 127 56 61 130 102 235] Cipher [62 210 135 119 146 59 215 233 197 251 31 141 50 104 181 169 2 21 19 227 29 85 158 85 244 21 46 124 232 46 171 148 127 92 227 129 227 68 181 49 125 91 206 210 81 115 140 66 154 186 195 181 254 142 202 145] ADD [104 105 32 116 104 101 114 101]

}
func ExampleAeadUnlock() {
	key := []byte("Gophers are such a fun thing. Hehehehehe")
	nonce := []byte{107, 131, 11, 111, 188, 30, 66, 190, 31, 157, 156, 136, 226, 107, 32, 114, 231, 159, 140, 245, 164, 170, 242, 191}
	mac := []byte{101, 221, 188, 62, 235, 121, 90, 252, 179, 62, 127, 56, 61, 130, 102, 235}
	cipher := []byte{62, 210, 135, 119, 146, 59, 215, 233, 197, 251, 31, 141, 50, 104, 181, 169, 2, 21, 19, 227, 29, 85, 158, 85, 244, 21, 46, 124, 232, 46, 171, 148, 127, 92, 227, 129, 227, 68, 181, 49, 125, 91, 206, 210, 81, 115, 140, 66, 154, 186, 195, 181, 254, 142, 202, 145}
	add := []byte{104, 105, 32, 116, 104, 101, 114, 101}
	plain := AeadUnlock(cipher, nonce, key, mac, add)
	fmt.Println(string(plain))
	// Output: Hello this is Gopher army, we are gonna rule this world
}

// func ExampleSign() {
// 	message := []byte("Hello this is Gopher army, we are gonna rule this world ")
// 	secretKey := []byte("Gophers are such a fun thing. Hehehehehe")
// 	publicKey := []byte("Hacking Hacking guys this is so much fun")
// 	signature := Sign(message, publicKey, secretKey)
// 	fmt.Println(signature)
// 	// Output: [6 120 71 136 49 158 172 155 206 95 57 178 10 207 175 117 246 61 24 39 195 95 41 84 90 105 120 173 99 109 85 117 26 83 150 48 192 87 2 97 206 3 72 5 181 214 237 172 118 86 111 2 118 216 51 238 39 150 87 204 246 55 101 14]
// }

// func ExampleCheckSign() {
// 	message := []byte("Hello this is Gopher army, we are gonna rule this world ")
// 	// secretKey := []byte("Gophers are such a fun thing. Hehehehehe")
// 	publicKey := []byte("Hacking Hacking guys this is so much fun")
// 	signature := []byte{6, 120, 71, 247, 49, 158, 172, 155, 206, 95, 57, 178, 10, 207, 175, 117, 246, 61, 24, 39, 195, 95, 41, 84, 90, 105, 120, 173, 99, 109, 85, 117, 26, 83, 150, 48, 192, 87, 2, 97, 206, 3, 72, 5, 181, 214, 237, 172, 118, 86, 111, 2, 118, 216, 51, 238, 39, 150, 87, 204, 246, 55, 101, 14}
// 	result := CheckSign(message, publicKey, signature)
// 	fmt.Println(result)
// 	// Output: 0
// }
